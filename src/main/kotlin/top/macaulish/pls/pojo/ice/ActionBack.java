// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `pls.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package top.macaulish.pls.pojo.ice;

public class ActionBack implements Cloneable,
        java.io.Serializable {
    public static final long serialVersionUID = 718364112L;
    private static final ActionBack _nullMarshalValue = new ActionBack();
    public String taskGuid;
    public String action;
    public String result;
    public String reason;

    public ActionBack() {
        this.taskGuid = "";
        this.action = "";
        this.result = "";
        this.reason = "";
    }

    public ActionBack(String taskGuid, String action, String result, String reason) {
        this.taskGuid = taskGuid;
        this.action = action;
        this.result = result;
        this.reason = reason;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ActionBack v) {
        if (v == null) {
            _nullMarshalValue.ice_writeMembers(ostr);
        } else {
            v.ice_writeMembers(ostr);
        }
    }

    static public ActionBack ice_read(com.zeroc.Ice.InputStream istr) {
        ActionBack v = new ActionBack();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ActionBack> v) {
        if (v != null && v.isPresent()) {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ActionBack v) {
        if (ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ActionBack> ice_read(com.zeroc.Ice.InputStream istr, int tag) {
        if (istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            istr.skip(4);
            return java.util.Optional.of(ActionBack.ice_read(istr));
        } else {
            return java.util.Optional.empty();
        }
    }

    public Boolean isSuccessBack() {
        return result.trim().toLowerCase().equals("success");
    }

    public boolean equals(Object rhs) {
        if (this == rhs) {
            return true;
        }
        ActionBack r = null;
        if (rhs instanceof ActionBack) {
            r = (ActionBack) rhs;
        }

        if (r != null) {
            if (this.taskGuid != r.taskGuid) {
                if (this.taskGuid == null || r.taskGuid == null || !this.taskGuid.equals(r.taskGuid)) {
                    return false;
                }
            }
            if (this.action != r.action) {
                if (this.action == null || r.action == null || !this.action.equals(r.action)) {
                    return false;
                }
            }
            if (this.result != r.result) {
                if (this.result == null || r.result == null || !this.result.equals(r.result)) {
                    return false;
                }
            }
            if (this.reason != r.reason) {
                if (this.reason == null || r.reason == null || !this.reason.equals(r.reason)) {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode() {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::PLS::ActionBack");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, taskGuid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, action);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, result);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, reason);
        return h_;
    }

    public ActionBack clone() {
        ActionBack c = null;
        try {
            c = (ActionBack) super.clone();
        } catch (CloneNotSupportedException ex) {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr) {
        ostr.writeString(this.taskGuid);
        ostr.writeString(this.action);
        ostr.writeString(this.result);
        ostr.writeString(this.reason);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr) {
        this.taskGuid = istr.readString();
        this.action = istr.readString();
        this.result = istr.readString();
        this.reason = istr.readString();
    }
}
