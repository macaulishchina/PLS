// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `pls.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package top.macaulish.pls.pojo.ice;

public class ModelInfo implements Cloneable,
        java.io.Serializable {
    public static final long serialVersionUID = 1494244182L;
    private static final ModelInfo _nullMarshalValue = new ModelInfo();
    public String guid;
    public String name;
    public String location;
    public String state;
    public String description;

    public ModelInfo() {
        this.guid = "";
        this.name = "";
        this.location = "";
        this.state = "";
        this.description = "";
    }

    public ModelInfo(String guid, String name, String location, String state, String description) {
        this.guid = guid;
        this.name = name;
        this.location = location;
        this.state = state;
        this.description = description;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, ModelInfo v) {
        if (v == null) {
            _nullMarshalValue.ice_writeMembers(ostr);
        } else {
            v.ice_writeMembers(ostr);
        }
    }

    static public ModelInfo ice_read(com.zeroc.Ice.InputStream istr) {
        ModelInfo v = new ModelInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<ModelInfo> v) {
        if (v != null && v.isPresent()) {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, ModelInfo v) {
        if (ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<ModelInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag) {
        if (istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            istr.skip(4);
            return java.util.Optional.of(ModelInfo.ice_read(istr));
        } else {
            return java.util.Optional.empty();
        }
    }

    public boolean equals(Object rhs) {
        if (this == rhs) {
            return true;
        }
        ModelInfo r = null;
        if (rhs instanceof ModelInfo) {
            r = (ModelInfo) rhs;
        }

        if (r != null) {
            if (this.guid != r.guid) {
                if (this.guid == null || r.guid == null || !this.guid.equals(r.guid)) {
                    return false;
                }
            }
            if (this.name != r.name) {
                if (this.name == null || r.name == null || !this.name.equals(r.name)) {
                    return false;
                }
            }
            if (this.location != r.location) {
                if (this.location == null || r.location == null || !this.location.equals(r.location)) {
                    return false;
                }
            }
            if (this.state != r.state) {
                if (this.state == null || r.state == null || !this.state.equals(r.state)) {
                    return false;
                }
            }
            if (this.description != r.description) {
                if (this.description == null || r.description == null || !this.description.equals(r.description)) {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode() {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::PLS::ModelInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, guid);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, name);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, location);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, state);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, description);
        return h_;
    }

    public ModelInfo clone() {
        ModelInfo c = null;
        try {
            c = (ModelInfo) super.clone();
        } catch (CloneNotSupportedException ex) {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr) {
        ostr.writeString(this.guid);
        ostr.writeString(this.name);
        ostr.writeString(this.location);
        ostr.writeString(this.state);
        ostr.writeString(this.description);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr) {
        this.guid = istr.readString();
        this.name = istr.readString();
        this.location = istr.readString();
        this.state = istr.readString();
        this.description = istr.readString();
    }
}
