// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `pls.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package top.macaulish.pls.pojo.ice;

public class SFTPInfo implements Cloneable,
        java.io.Serializable {
    public static final long serialVersionUID = -1801915765L;
    private static final SFTPInfo _nullMarshalValue = new SFTPInfo();
    public String host;
    public int port;
    public String username;
    public String password;

    public SFTPInfo() {
        this.host = "";
        this.username = "";
        this.password = "";
    }

    public SFTPInfo(String host, int port, String username, String password) {
        this.host = host;
        this.port = port;
        this.username = username;
        this.password = password;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, SFTPInfo v) {
        if (v == null) {
            _nullMarshalValue.ice_writeMembers(ostr);
        } else {
            v.ice_writeMembers(ostr);
        }
    }

    static public SFTPInfo ice_read(com.zeroc.Ice.InputStream istr) {
        SFTPInfo v = new SFTPInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<SFTPInfo> v) {
        if (v != null && v.isPresent()) {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, SFTPInfo v) {
        if (ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<SFTPInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag) {
        if (istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize)) {
            istr.skip(4);
            return java.util.Optional.of(SFTPInfo.ice_read(istr));
        } else {
            return java.util.Optional.empty();
        }
    }

    public boolean equals(Object rhs) {
        if (this == rhs) {
            return true;
        }
        SFTPInfo r = null;
        if (rhs instanceof SFTPInfo) {
            r = (SFTPInfo) rhs;
        }

        if (r != null) {
            if (this.host != r.host) {
                if (this.host == null || r.host == null || !this.host.equals(r.host)) {
                    return false;
                }
            }
            if (this.port != r.port) {
                return false;
            }
            if (this.username != r.username) {
                if (this.username == null || r.username == null || !this.username.equals(r.username)) {
                    return false;
                }
            }
            if (this.password != r.password) {
                if (this.password == null || r.password == null || !this.password.equals(r.password)) {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode() {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::PLS::SFTPInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, host);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, port);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, username);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, password);
        return h_;
    }

    public SFTPInfo clone() {
        SFTPInfo c = null;
        try {
            c = (SFTPInfo) super.clone();
        } catch (CloneNotSupportedException ex) {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr) {
        ostr.writeString(this.host);
        ostr.writeInt(this.port);
        ostr.writeString(this.username);
        ostr.writeString(this.password);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr) {
        this.host = istr.readString();
        this.port = istr.readInt();
        this.username = istr.readString();
        this.password = istr.readString();
    }
}
