// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `pls.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package top.macaulish.pls.service.ice.server;

import top.macaulish.pls.pojo.ice.*;

public interface Task extends com.zeroc.Ice.Object {
    static final String[] _iceIds =
            {
                    "::Ice::Object",
                    "::PLS::Task"
            };
    final static String[] _iceOps =
            {
                    "create",
                    "delete",
                    "getDownloadDir",
                    "getDownloadResultZip",
                    "getFTPInfo",
                    "getProgress",
                    "getUploadDir",
                    "ice_id",
                    "ice_ids",
                    "ice_isA",
                    "ice_ping",
                    "pause",
                    "query",
                    "resume",
                    "start",
                    "stop"
            };

    static String ice_staticId() {
        return "::PLS::Task";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_create(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_modelGuid;
        String iceP_taskGuid;
        String iceP_taskType;
        iceP_modelGuid = istr.readString();
        iceP_taskGuid = istr.readString();
        iceP_taskType = istr.readString();
        inS.endReadParams();
        ActionBack ret = obj.create(iceP_modelGuid, iceP_taskGuid, iceP_taskType, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ActionBack.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_start(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        ActionBack ret = obj.start(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ActionBack.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_pause(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        ActionBack ret = obj.pause(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ActionBack.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_resume(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        ActionBack ret = obj.resume(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ActionBack.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_stop(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        ActionBack ret = obj.stop(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ActionBack.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_delete(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        ActionBack ret = obj.delete(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ActionBack.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_query(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        TaskInfo ret = obj.query(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        TaskInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getProgress(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        TaskProcessInfo ret = obj.getProgress(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        TaskProcessInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getUploadDir(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        PathInfo ret = obj.getUploadDir(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        PathInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDownloadDir(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        PathInfo ret = obj.getDownloadDir(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        PathInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getDownloadResultZip(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_taskGuid;
        iceP_taskGuid = istr.readString();
        inS.endReadParams();
        String ret = obj.getDownloadResultZip(iceP_taskGuid, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_getFTPInfo(Task obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current) {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        SFTPInfo ret = obj.getFTPInfo(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        SFTPInfo.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    ActionBack create(String modelGuid, String taskGuid, String taskType, com.zeroc.Ice.Current current);

    ActionBack start(String taskGuid, com.zeroc.Ice.Current current);

    ActionBack pause(String taskGuid, com.zeroc.Ice.Current current);

    ActionBack resume(String taskGuid, com.zeroc.Ice.Current current);

    ActionBack stop(String taskGuid, com.zeroc.Ice.Current current);

    ActionBack delete(String taskGuid, com.zeroc.Ice.Current current);

    TaskInfo query(String taskGuid, com.zeroc.Ice.Current current);

    TaskProcessInfo getProgress(String taskGuid, com.zeroc.Ice.Current current);

    PathInfo getUploadDir(String taskGuid, com.zeroc.Ice.Current current);

    PathInfo getDownloadDir(String taskGuid, com.zeroc.Ice.Current current);

    String getDownloadResultZip(String taskGuid, com.zeroc.Ice.Current current);

    SFTPInfo getFTPInfo(com.zeroc.Ice.Current current);

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current) {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current) {
        return ice_staticId();
    }

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
            throws com.zeroc.Ice.UserException {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if (pos < 0) {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch (pos) {
            case 0: {
                return _iceD_create(this, in, current);
            }
            case 1: {
                return _iceD_delete(this, in, current);
            }
            case 2: {
                return _iceD_getDownloadDir(this, in, current);
            }
            case 3: {
                return _iceD_getDownloadResultZip(this, in, current);
            }
            case 4: {
                return _iceD_getFTPInfo(this, in, current);
            }
            case 5: {
                return _iceD_getProgress(this, in, current);
            }
            case 6: {
                return _iceD_getUploadDir(this, in, current);
            }
            case 7: {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 8: {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 9: {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 10: {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 11: {
                return _iceD_pause(this, in, current);
            }
            case 12: {
                return _iceD_query(this, in, current);
            }
            case 13: {
                return _iceD_resume(this, in, current);
            }
            case 14: {
                return _iceD_start(this, in, current);
            }
            case 15: {
                return _iceD_stop(this, in, current);
            }
        }

        assert (false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
